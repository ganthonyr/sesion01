---
title: "Bases de R para manejo y análisis de datos"
subtitle: "Sesión 01: Introducción a R y Flujos de trabajo reproducible"
author: "Anthony Romero"
output: html_document
---

## INTRODUCCIÓN Y RECOMENDACIONES:

En esta primera sesión, revisaremos algunos fundamentos de programación con R y terminaremos aprendiendo a importar y exportar datos *desde* y *a* formato dta, csv y xlsx.

### Objetivos de aprendizaje:
En esta primera sesión aprenderemos a...
-Explorar las herramientas, partes y entorno de RStudio (paneles, comentar líneas, chunk, etc)
-Aprender a instalar y cargar paquetes con código/click y pedir ayuda
-Conocer los operadores aritméticos, logicos y de asignacion.
-Conocer los tipos de datos (vector, lista, matriz, data frame) y crear objetos (operador asignación)
-Crear proyectos (R projects) para flujos de trabajo reproducible
-Importar/exportar bases de datos con `{rio}`

### Algunas recomendaciones:

- Antes de empezar a escribir código, es importante conocer y reconocer los distintos paneles que nos muestra RStudio y sus utilidades: 

  *1. Editor de texto (script, qmd, rmd)* -> (Arriba a la izquierda)  

  Donde escribimos y almacenamos código, es el "word" de RStudio.

  *2. Consola* -> (Abajo a la izquierda)

  Donde también escribimos código, sin embargo, a diferencia del editor, este no se almacena.  

  *3. Enviroment* -> (Arriba a la derecha)

  Donde podemos ver todos los archivos u objetos que tenemos guardado en nuestro R.

  *4. Files* -> (Abajo a la izquierda)

  Este 4to panel contiene varias pestañas. Las dos más importantes por ahora son: El "files" donde veremos nuestros archivos (como en el     explorador de archivos de nuestra computadora); y el "Help", donde encontraremos la información sobre paquetes y/o funciones que Rstudio   nos ofrece. 

- Atajos de teclado sugeridos (para microsoft):

1) `alt + 94` -> `^` (símbolo de potencia)

2) `ctrl + shift + c` -> comentar la línea o texto seleccionado

3) `ctrl + Enter` -> correr el código seleccionado (no es necesario sombrear, a menos que...)

## PRIMERA PARTE: R COMO CALCULADORA

### ¿Cómo realizar cálculos aritméticos en R?

Para esto, simplemente necesitamos saber cómo llamar a los operadores aritméticos en R, revisemos la siguiente lista:

1. `+` -> Suma
2. `-` -> Resta
3. `*` -> Multiplicación
4. `/` -> División básica
5. `sqrt()` -> Raíz cuadrada
6. `^` -> Potencia

Operadores adicionales (operadores lógicos):
7. `>` -> mayor que
8. `<` -> menor que
9. `==` -> igual a
10. `!=` -> diferente de
11. `>=` -> mayor o igual que
12. `<=` -> menor o igual que

Ahora practiquemos jugando con estos operadores (alternemos source y console para ver la diferencia y probemos guardando objetos):
```{r}

```

### Ejercicio 1: 

En un estudio clínico, se registró la edad de 10 pacientes (28, 45, 60, 35, 42, 55, 32, 50, 47 y 38 años). Calcular la media de edad de los pacientes.

```{r}


```

### Ejercicio 2:

Realizar una operación para calcular el descuento aplicado a un producto. El precio original es 100 y el descuento es del 20%.

```{r}


```

### Ejercicio 3:

Un médico necesita calcular el IMC (Índice de Masa Corporal) de un paciente. Si el peso del paciente es de 70 kg y su altura es de 1.75 metros, ¿cuál sería su IMC? (Fórmula: IMC = peso / altura^2)

```{r}


```

### Ejercicio 4:

Una tienda de ropa tiene una oferta de descuento del 20% en todos sus productos. Si un artículo tiene un precio original de $50, ¿cuál sería su precio después de aplicar el descuento?

```{r}


```

### Ejercicio 5:

Un estudiante tiene que pagar el alquiler de su apartamento, que tiene un costo mensual de $800. Si el estudiante comparte el apartamento con dos compañeros y deciden dividir el costo del alquiler por igual, ¿cuánto deberá pagar cada estudiante?

```{r}


```

### Ejercicio 6:

Los pesos de Carlos y Robert son 72 y 80kg. Sus tallas son 1.88 y 1.71, respectivamente. Calcular el IMC para cada caso y determinar si alguno tiene sobrepeso (IMC>=25) 

```{r}


```

### Ejercicio propuesto:

Los pesos de Jhonatan, Rafael y Enrique son 92, 89 y 79kg. Sus tallas son 1.78, 1.91 y 1,69m, respectivamente. Calcular el IMC para cada caso y determinar si alguno tiene sobrepeso (IMC>=25) 

```{r}

```

### Ejercicio propuesto:

Los pesos de Sara, Fiorella y Pamela son 68700, 71400 y 63200g. Sus tallas son 164, 159 y 168cm, respectivamente. Calcular el IMC para cada caso y determinar si alguna presenta sobrepeso (IMC>=25)

```{r}

```

## SEGUNDA PARTE: TIPOS DE DATOS  Y OBJETOS EN R

¡EN R TODO ES UN OBJETO!
En R, existen diferentes tipos o estructuras de objetos que se utilizan para almacenar y manipular datos.

Primero recordemos los tipos de datos en R:

1. Numerics (valores númericos en general) 

```{r}

```

2. Integers (números enteros)

```{r}

```

3. Doubles (números decimales)

```{r}

```

4. Logicals (valores lógicos)

```{r}

```

5. Characters (caracteres)

```{r}

```

Ahora aprendamos sobre los tipos de objetos principales en R!

1. *Vectores:*
Los vectores son objetos que contienen *elementos del mismo tipo*. Pueden ser de tipo numérico, de caracteres, lógicos, entre otros. Se crean con la función `c()`.

```{r}
#Crear vectores

```

2. *Listas:*
Las listas son objetos que pueden contener *elementos de diferentes tipos*, incluyendo vectores, matrices u otras listas. Se crean mediante la función `list()`.

```{r}
#crear una lista

```

3. *Matrices:*
Las matrices son objetos bidimensionales que contienen *elementos del mismo tipo*. Tienen filas y columnas, y se crean mediante la función `matrix()`.

```{r}
#crear una matriz

```

4. *Factores:*
Los factores son objetos utilizados para representar *variables categóricas*. Almacenar los datos como factores permite realizar análisis estadísticos adecuados para variables categóricas. Se crean con la función `factor()`.

```{r}
#Crear un factor

```

5. *Data Frames:*
Los data frames son objetos similares a las matrices, pero pueden contener *columnas con diferentes tipos de datos*. Son estructuras tabulares, donde cada columna representa una variable y cada fila representa una observación (DATOS TIDY!).

```{r}
# Crear un data frame


```

Ahora juguemos con estos tipos de objetos en R!!
```{r}
# crear vectores, listas, matrices, data.frames, factores


```

### Ejercicio 13:

Crear un vector numérico que contenga los números del 1 al 5.

```{r}

```

### Ejercicio 14:

Crear un vector de caracteres que contenga los nombres de tres colores: "rojo", "verde" y "azul".

```{r}

```

### Ejercicio 15:

Crear una matriz numérica 2x2 con los siguientes valores: 1, 2, 3, 4.
```{r}

```

### Ejercicio 16:

Crea una lista que contenga los siguientes elementos: un número entero, un vector de caracteres y una matriz numérica 2x2.

```{r}

```

### ejercicio propuesto:

En un estudio médico, se recaudaron datos de pacientes y se recopilaron nombres (caracter): "Ana", "Juan", "María"; edades (numérico): 35, 42, 38; pulso (vector numérico): 60, 78, 89; y diagnóstico (factor): "Hipertensión", "Normal", "Hipertensión". Crear un data frame que contenga esta información para los 3 pacientes.

```{r}
#¿Cómo le hacemos?

```


## TERCERA PARTE: IMPORTANDO Y EXPORTANDO BASES DE DATOS CON `{rio}`

### Instalar y cargar paquetes

Antes de aprender a importar datos en R, debemos instalar y cargar *paquetes* (conjunto de funciones orientadas a cumplir tareas relacionadas o específicas)

```{r}
#| label: instalar y cargar paquetes
#| include: false

# install.packages("rio")   # Paquete considerado la navaja suiza de la importación de datos
# library(rio)              # Cargar el paquete para poder utilizarlo
```

### Algunas recomendaciones:

-Para importar correctamente una base de datos, verificar dos aspectos:
  1. Su ubicación: ¿en qué carpeta la tenemos guardada? Esto nos permitirá llamarla sin problemas mediante el URL del archivo. Recordar que es recomendable que las bases de datos que vamos a usar se encuentren en la misma carpeta que el proyecto (Rproject).   
  2. Su formato: ¿la data es un archivo csv? dta? xlsx? Esto nos permitirá utilizar la función de importación de manera adecuada.

-Sintaxis de la función `import()` de rio:

`nombre -> import("url del archivo. Debe terminar en .extensión")`

-Sintaxis de la función `export()` de rio:

`export(nombre de la data que queremos exportar, "url del archivo. Debe terminar en .extensión")`

Ahora sí, practiquemos:

### Ejercicio 1

Importar la base de datos "data_enaho2017_v2" y guardarla como "data_ejm1".

```{r}

```

### Ejercicio 2

Importar la base de datos "data_ejm" y guardarla como "data_ejm2".

```{r}

```

### Ejercicio 3

Importar la base de datos "data_ejercicio" y guardarla como "data_ejm3".

```{r}

```

### Ejercicio 4

Importar la base de datos "data_SPSS" y guardarla como "data_ejm4".

```{r}

```

### Ejercicio 5

Exportar con el mismo nombre pero en formato *.csv*, *.sav*, *.xlsx* y *.dta* todas las bases importadas, respectivamente.

```{r}

```


## Para la casa:

### Ejercicio 1:

Supongamos que tienes las siguientes notas de un estudiante en tres asignaturas: Matemáticas (8.5), Ciencias (7.2) e Historia (6.8). Calcula el promedio de las tres asignaturas

```{r}


```

### Ejercicio 2:

Tienes una lista de animales y su cantidad en un zoológico: "león" (5), "elefante" (3) y "jirafa" (2). Realiza las siguientes operaciones:

Multiplica la cantidad de leones por la cantidad de elefantes.
Divide la cantidad de jirafas entre la cantidad de leones.
Saca la raíz cuadrada de la cantidad total de animales en el zoológico.

```{r}


```

### Ejercicio 3:

En un salón de clases, se tienen las notas de tres estudiantes: Juan, María y Pedro, y también se tiene la cantidad de perros que cada estudiante posee: Juan (2), María (1) y Pedro (3). Calcular el promedio de las notas de los tres estudiantes y multiplica ese promedio por la cantidad total de perros respectiva. 

```{r}


```

### Ejercicio 4:

Tienes una lista llamada informacion que contiene información sobre tres personas: nombres ("Juan", "María", "Pedro"), edades (25, 30, 35), estado civil ("soltero", "casado", "casado") y género ("M", "F", "M"). Crear un data frame a partir de esta lista y luego realiza una operación que calcule la edad promedio de las personas casadas.

```{r}


```

### Ejercicio 5:

Quieres crear un objeto en R para almacenar información sobre tus canciones, películas y números favoritos. ¿Qué tipo de objeto escogerías para esto? Puedes crearlo?

```{r}


```
